= Coding Style Guidelines =

=== Language ===
Name your variables, classes, methods, functions and all other things in American English. Comments should likewise be in English, but your own local English is fine (as long as it's readable to anyone fluent in any dialect of English).

=== Variable names ===
Instance and local variables should generally be named in camelCase, with a lowercase initial letter, and no underscores. No form of Hungarian notation is to be used, ever.

=== Type and class names ===
Use struct or enum when allowed:

{% templatetag openbrace %}{% templatetag openbrace %}{% templatetag openbrace %}
struct sockaddr saddr;
struct FSForkIOParam pb;
{% templatetag closebrace %}{% templatetag closebrace %}{% templatetag closebrace %}

But not when this is discouraged (as with some Cocoa structures):

{% templatetag openbrace %}{% templatetag openbrace %}{% templatetag openbrace %}
NSRect rect; //NOT struct _NSRect
{% templatetag closebrace %}{% templatetag closebrace %}{% templatetag closebrace %}

Classes should be named in CamelCase, with an uppercase initial letter, and no underscores. Name your classes so that it's obvious what they belong to and what they're for.  Classes should have a two letter prefix.  This may be your initials if you prefer, or you may use FR (for FadingRed).  (e.g. {% templatetag openbrace %}{% templatetag openbrace %}{% templatetag openbrace %} FRCamelCaseObject {% templatetag closebrace %}{% templatetag closebrace %}{% templatetag closebrace %})

Methods should be arranged as follows:
{% templatetag openbrace %}{% templatetag openbrace %}{% templatetag openbrace %}
+ (Foo *)classMethods;
+ (id)classMethodsThatCreateObjects; //e.g. new or newWithZone
- (id)init;
- (id)initWithExtraArgument:(id)extraArgument andOtherExtraArgument:(id)otherExtraArgument;
- (void)dealloc;
// Other instance methods
{% templatetag closebrace %}{% templatetag closebrace %}{% templatetag closebrace %}

Don't use 'int' unless there are no qualifiers on it. All three of these declarations are correct:
{% templatetag openbrace %}{% templatetag openbrace %}{% templatetag openbrace %}
int x; // no qualifiers
unsigned y; // qualifier 'unsigned'
short z; // qualifier 'short'
{% templatetag closebrace %}{% templatetag closebrace %}{% templatetag closebrace %}

=== Selector names ===
Always include return type, even if it's id.

All parameter names are assumed to be inputs, unless noted otherwise. You might consider using the 'in' or 'out' keyword if it needs to be explicitly disambiguated.

{% templatetag openbrace %}{% templatetag openbrace %}{% templatetag openbrace %}
- (id)tableView:(NSTableView *)tableView objectValueForTableColumn:(NSTableColumn *)column row:(int)row;
- (BOOL)scanUpToString:(NSString *)inString intoString:(NSString **)outString;
{% templatetag closebrace %}{% templatetag closebrace %}{% templatetag closebrace %}

=== Variable Declarations ===
Always initialize variables at declaration time or immediately afterwards. 
Never use a variable's value without initializing it first.

=== Message line breaking ===
Encouraged for long messages:
{% templatetag openbrace %}{% templatetag openbrace %}{% templatetag openbrace %}
// Animate the icon   
animationTimer = [[NSTimer scheduledTimerWithTimeInterval:ANIMATION_DELAY
                                                   target:self
                                                 selector:@selector(animateIcon:)
                                                 userInfo:nil
                                                  repeats:YES] retain];
                                                  {% templatetag closebrace %}{% templatetag closebrace %}{% templatetag closebrace %}
(Note how the colons line up vertically in a monospaced font.)

The correct number of tabs and spaces to line up the colons can be inserted automatically by Xcode, by using the Re-Indent command in the Format menu.

Line breaking is generally encouraged for all sorts of long expressions, provided it does not reduce readability. Consider:
{% templatetag openbrace %}{% templatetag openbrace %}{% templatetag openbrace %}
if (some_long_condition &&
    some_other_long_condition ||
    some_completely_different_long_condition)
{% templatetag closebrace %}{% templatetag closebrace %}{% templatetag closebrace %}
over:
{% templatetag openbrace %}{% templatetag openbrace %}{% templatetag openbrace %}
if (some_long_condition && some_other_long_condition || some_completely_different_long_condition) 
{% templatetag closebrace %}{% templatetag closebrace %}{% templatetag closebrace %}

=== Braces and Whitespace ===
{% templatetag openbrace %}{% templatetag openbrace %}{% templatetag openbrace %}
- (BOOL)textAndButtonsWindowDidEnd:(NSWindow *)window returnCode:(AITextAndButtonsReturnCode)returnCode userInfo:(id)userInfo {
	if (returnCode == AITextAndButtonsDefaultReturn) {
		[self gotDefaultReturn]; // To explain the current line of code
	} else if (returnCode == AITextAndButtonsOtherReturn) {
                // A multi-line comment should be formatted like this and
                // explain the code below.  Write your code so it is understandable
                // without comments... and comment it!  This helps you and helps
                // future programmers work with your code.
		[self gotOtherReturn];
	} else {
		// A longer, single line comment to explain the next line of code
		[self displayError];
	}
}
{% templatetag closebrace %}{% templatetag closebrace %}{% templatetag closebrace %}

Braces for method/function definition go on the same line as the definition.  The last brace of an if-else chain should be on its own line, but all other braces in the chain (opening braces and closing braces) should be on the same line as the statement.

Always use tabs to indent. Never spaces. Ever.

Indent your instance variables, too.

Always use spaces around operators:
{% templatetag openbrace %}{% templatetag openbrace %}{% templatetag openbrace %}
2 + 2, not 2+2
x && y, not x&&y
x << 256 not x<<256
{% templatetag closebrace %}{% templatetag closebrace %}{% templatetag closebrace %}

Put a space between a keyword and the opening parenthesis:
{% templatetag openbrace %}{% templatetag openbrace %}{% templatetag openbrace %}
if (a)
// not: if(a)
{% templatetag closebrace %}{% templatetag closebrace %}{% templatetag closebrace %}
But not between a function name and the opening parenthesis:
{% templatetag openbrace %}{% templatetag openbrace %}{% templatetag openbrace %}
printf("%s", "Hello world!
");
// not: printf ("%s", "Hello world!
");
{% templatetag closebrace %}{% templatetag closebrace %}{% templatetag closebrace %}

Don't pad the inside of the parentheses with spaces:
{% templatetag openbrace %}{% templatetag openbrace %}{% templatetag openbrace %}
if (a && b)
// not: if ( a && b )
{% templatetag closebrace %}{% templatetag closebrace %}{% templatetag closebrace %}

Don't use parentheses around the argument to return (making it look like a function call):
{% templatetag openbrace %}{% templatetag openbrace %}{% templatetag openbrace %}
return 0;
// not: return(0);
{% templatetag closebrace %}{% templatetag closebrace %}{% templatetag closebrace %}
But it's OK for parenthesized expressions:
{% templatetag openbrace %}{% templatetag openbrace %}{% templatetag openbrace %}
return ((x * y) ? 42 : [array objectAtIndex:fallback]);
{% templatetag closebrace %}{% templatetag closebrace %}{% templatetag closebrace %}

Leave all blank lines (those with no visible characters) empty (not containing *any* characters). This means that a blank line should not contain any tabs or spaces.

=== Labels ===
Labels should always be on a line by themselves, and should be 1 indent to the left of the statement they apply to:
{% templatetag openbrace %}{% templatetag openbrace %}{% templatetag openbrace %}
switch (answer) {
	case 42:
		printf("Found the answer! (%i)
", answer);
}
{% templatetag closebrace %}{% templatetag closebrace %}{% templatetag closebrace %}
Note that in a switch, all statements are indented _two_ levels to allow for the case labels.

=== Comments ===
{% templatetag openbrace %}{% templatetag openbrace %}{% templatetag openbrace %}
// C99 single-line comments are allowed.
{% templatetag closebrace %}{% templatetag closebrace %}{% templatetag closebrace %}

{% templatetag openbrace %}{% templatetag openbrace %}{% templatetag openbrace %}
/* 
 * Multi-line comments at the beginning of a file should be used
 * whenever a comment spans multiple lines, like this one.  Be
 * sure the stars line up in a nice column, and that the end wing
 * is on its own line.  Also make sure you use a space after the
 * column of stars and that your lines are about the same length.
 */

 // Anywhere else in the file, multiline comments
 // should be made on separate lines by commenting
 // out each line.  Again the lines should be about
 // The same length.
 {% templatetag closebrace %}{% templatetag closebrace %}{% templatetag closebrace %}

Single-line comments should not be placed on the same line as long statements:
{% templatetag openbrace %}{% templatetag openbrace %}{% templatetag openbrace %}
// Area is pi * r-squared
area = 3.141592653589793238462643383279502884197169399375105820974944592307816406286  * r * r;
{% templatetag closebrace %}{% templatetag closebrace %}{% templatetag closebrace %}
rather than:
{% templatetag openbrace %}{% templatetag openbrace %}{% templatetag openbrace %}
area = 3.141592653589793238462643383279502884197169399375105820974944592307816406286  * r * r; // pi * r-squared
{% templatetag closebrace %}{% templatetag closebrace %}{% templatetag closebrace %}
But for short statements, you may place it at the end:
{% templatetag openbrace %}{% templatetag openbrace %}{% templatetag openbrace %}
area = 3.14  * r * r; // pi * r-squared
{% templatetag closebrace %}{% templatetag closebrace %}{% templatetag closebrace %}

Multi-line comments should always come before the statement.

=== Multiple return statements ===
Return statements should be used at the end of methods unless there is a very good reason to do otherwise.

Example of how to avoid using a return statement in the middle of a method:
{% templatetag openbrace %}{% templatetag openbrace %}{% templatetag openbrace %}
- (NSString *)whosYourDaddy:(NSString *)inChild
{
	NSString *returnString = nil;
	if (inChild) {
		returnString = @"Alan Kay";
	}
	return returnString;
}
{% templatetag closebrace %}{% templatetag closebrace %}{% templatetag closebrace %}

=== Use of +new ===
Do not use {% templatetag openbrace %}{% templatetag openbrace %}{% templatetag openbrace %}+new{% templatetag closebrace %}{% templatetag closebrace %}{% templatetag closebrace %}.  Use {% templatetag openbrace %}{% templatetag openbrace %}{% templatetag openbrace %}+alloc{% templatetag closebrace %}{% templatetag closebrace %}{% templatetag closebrace %}/{% templatetag openbrace %}{% templatetag openbrace %}{% templatetag openbrace %}-init{% templatetag closebrace %}{% templatetag closebrace %}{% templatetag closebrace %}.

=== Ternary operator (foo ? bar : baz) ===
Allowed, and encouraged where readability is increased.  Make it three lines, with appropriate indenting, if foo, bar, and/or baz are long.  Always use parenthesis.

=== Index variables ===
Always unsigned unless necessary. Never use index variables for NSArrays; use NSEnumerator to iterate on those. (Only keep an index variable if you need to replace elements of an NSMutableArray.)

=== Numeric constants and NULL vs. nil ===
Always supply a fraction and an integer in any floating-point constant: 0.0, not 0. or .0.  Specify type constants only if strictly necessary.

Use nil for Cocoa types, and NULL elsewhere:

{% templatetag openbrace %}{% templatetag openbrace %}{% templatetag openbrace %}
- (char *) UTF8String
{
	if (UTF8String == NULL) {
		UTF8String = malloc([self length]);
        }

	if (UTF8String != NULL) {
		strcpy(UTF8String, "I am the Walrus");
        }

	return UTF8String;
}
{% templatetag closebrace %}{% templatetag closebrace %}{% templatetag closebrace %}

The above is for example purposes; whenever testing against NULL/nil, use 
simple truth-testing (and the ! operator when appropriate):
{% templatetag openbrace %}{% templatetag openbrace %}{% templatetag openbrace %}
void *buf = NULL;
size_t size = 0U, increment = getpagesize();
do {
	buf = realloc(buf, size);
	if (!buf) {
		NSLog(@"Could not allocate %zu bytes", size);
	} else {
		size += increment;
	}
} while (buf);
{% templatetag closebrace %}{% templatetag closebrace %}{% templatetag closebrace %}

Otherwise, always use constants whenever possible; for example:
 * Use NSComparisonResult constants instead of -1, 0, +1 when working with -compare:.
 * Use NSNotFound when testing whether a range- or index-search method found a match.
 * When creating Core Foundation objects, use the CFAllocator constants (e.g. kCFAllocatorDefault) at all times, even when requesting the default allocator. Don't use NULL to get the default allocator.

== Credits ==
This document is based on [http://trac.adiumx.com/wiki/CodingStyle Adium]'s !CodingStyle, with modifications for the !FadingRed coding style.
